<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Julian Dax</title><link>https://juliand.ax/</link><description>Recent content on Julian Dax</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 04 Feb 2024 00:35:30 +0200</lastBuildDate><atom:link href="https://juliand.ax/index.xml" rel="self" type="application/rss+xml"/><item><title>Implement Microservices Now</title><link>https://juliand.ax/posts/implement-microservices/</link><pubDate>Sun, 04 Feb 2024 00:35:30 +0200</pubDate><guid>https://juliand.ax/posts/implement-microservices/</guid><description>Implement Microservices Now 95% of backends deal with less than 100 requests per second. 80% of what they do is CRUD. So, let&amp;rsquo;s build distributed systems.
You Need Horizontal Scaling SQLite can do millions of inserts per second. Popular Javascript (yes, Javascript) frameworks can handle at least 10,000 requests per second. That&amp;rsquo;s why we need horizontal scaling via microservices.
More Complexity Is Just More Fun Have you ever been bored at work working with the same old technology?</description><content>&lt;h2 id="implement-microservices-now">Implement Microservices Now&lt;/h2>
&lt;p>95% of backends deal with less than 100 requests per second. 80% of what they do is CRUD. So, let&amp;rsquo;s build distributed
systems.&lt;/p>
&lt;h2 id="you-need-horizontal-scaling">You Need Horizontal Scaling&lt;/h2>
&lt;p>&lt;a href="https://avi.im/blag/2021/fast-sqlite-inserts/">SQLite can do millions of inserts per second.&lt;/a> Popular Javascript (yes,
Javascript) frameworks can handle &lt;a href="https://fastify.dev/">at least 10,000 requests per second&lt;/a>. That&amp;rsquo;s why we need horizontal scaling via microservices.&lt;/p>
&lt;h2 id="more-complexity-is-just-more-fun">More Complexity Is Just More Fun&lt;/h2>
&lt;p>Have you ever been bored at work working with the same old technology? Is it just a stupid server talking to a database and rendering HTML or JSON? You are missing out on lots of microservice fun! Some of your older colleagues might doubt the whole microservice trend, but that&amp;rsquo;s all just fear of new technologies. They will come up with all sorts of ifs and buts, so here are some things that won&amp;rsquo;t be a problem:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Cache invalidation:&lt;/strong> This classic problem becomes easy in distributed systems. Just send messages!&lt;/li>
&lt;li>&lt;strong>Fault tolerance&lt;/strong>: Your 50 microservices will always be up and respond quickly.&lt;/li>
&lt;li>&lt;strong>Monitoring:&lt;/strong> You can&amp;rsquo;t debug your application locally anymore; therefore, you will add Open Telemetry and Prometheus to your services. You will run Grafana, Influx, Clickhouse, MinIO, Kibana, and ElasticSearch to store and view your traces, metrics, and logs. As a rule, have at least one k8s pod running in your monitoring namespace per microservice you operate.&lt;/li>
&lt;li>&lt;strong>Serializing and Deserializing JSON:&lt;/strong> By turning every function call into an HTTP query, your CPUs finally have something valuable to do: serializing and deserializing JSON. It&amp;rsquo;s a fun pastime, occupying at least 60% of their cycles.&lt;/li>
&lt;li>&lt;strong>Validating JSON:&lt;/strong> Do you like writing JSON schemas? Me too! The validation will also take another 10% CPU time.&lt;/li>
&lt;li>&lt;strong>Reimplementing SQL:&lt;/strong> As any good developer knows, SQL does not scale. &lt;strong>We can fix this by adding an ad hoc, informally-specified, bug-ridden, slow implementation of half of SQL to all of our services.&lt;/strong> We&amp;rsquo;ll keep these in sync using Kafka!&lt;/li>
&lt;li>&lt;strong>&amp;ldquo;Scaling&amp;rdquo;:&lt;/strong> Scaling means how many services you can run in parallel, &lt;strong>not&lt;/strong> how much throughput you have. In the unlikely case that you have a lot of users (or do load tests), everything will go just as planned.&lt;/li>
&lt;li>&lt;strong>Service granularity&lt;/strong>: The answer to &amp;ldquo;how big should my service be&amp;rdquo; is always smaller. There is no overhead in having additional services. Maintaining invariants in data shared between several services is a breeze.&lt;/li>
&lt;li>&lt;strong>Finding the right people&lt;/strong>: Hiring people good at distributed systems is straightforward. Programmers can also finally fulfill their dream of becoming infrastructure experts.&lt;/li>
&lt;li>&lt;strong>Money&lt;/strong>: You can just rent a few k8s clusters from AWS for the low price of a single-family home per month. In the unlikely case that our company needs to save money on that, remember that microservices are equally great at scaling down as they are at scaling up.&lt;/li>
&lt;li>&lt;strong>The Environment&lt;/strong>: As software developers, we don&amp;rsquo;t go outside anyway.&lt;/li>
&lt;/ol>
&lt;p>If your colleagues are still against implementing microservices, remind them about all the new career opportunities that
will open up for them. CV-driven development always results in the best products. And lastly, doing this will create jobs! A problem requiring 50 microservices must be complex, so management will hire more people. The people already with the company might even get one of the new tech lead positions.&lt;/p>
&lt;p>Are your colleagues still not convinced? Then it&amp;rsquo;s time for action: introduce Clean Code. Those beautiful
AbstractProxyFactoryFacories will ensure that your server will handle ten requests per second maximum, and then you&amp;rsquo;ll
&lt;strong>need&lt;/strong> horizontal scaling. All your super complicated business logic (that you could express as database constraints)
will be wonderfully isolated from unimportant details. You get extra points if you use your favorite ORM and Dependency
Injection container in all your new microservices. This way, you can combine the majestic slowness of Clean Code with
the heart- and CUP-warming compute requirements of microservices. Also, write your own &amp;ldquo;SDK&amp;rdquo; that everyone has to use.
Doing this will keep the teams moving fast, as everyone depends on the SDK team for everything.&lt;/p></content></item><item><title>Cargo Cult Code Generation</title><link>https://juliand.ax/posts/cargo-cult-code-gen/</link><pubDate>Fri, 05 May 2023 21:19:33 +0200</pubDate><guid>https://juliand.ax/posts/cargo-cult-code-gen/</guid><description>Javascript Errors in the Wild Recently, I came across this code in the popular Axios library:
function AxiosError(message, code, config, request, response) { Error.call(this); // some more code i&amp;#39;ve left out for brevity } What does Error.call(this) do, you might ask? Nothing! I&amp;rsquo;ve tried it out in Node versions back until 6, Spidermonkey and JavaScriptCore. None of them do anything to the this object of the Error constructor. Moreover, the specification says that you have to be able to call the Error constructor without new, so it makes sense to implement it that way.</description><content>&lt;h2 id="javascript-errors-in-the-wild">Javascript Errors in the Wild&lt;/h2>
&lt;p>Recently, I came across this code in the popular &lt;a href="https://github.com/axios/axios/blob/21a5ad34c4a5956d81d338059ac0dd34a19ed094/lib/core/AxiosError.js">Axios library&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">AxiosError&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>, &lt;span style="color:#a6e22e">code&lt;/span>, &lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">request&lt;/span>, &lt;span style="color:#a6e22e">response&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Error.&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// some more code i&amp;#39;ve left out for brevity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What does &lt;code>Error.call(this)&lt;/code> do, you might ask? Nothing! I&amp;rsquo;ve tried it out in
Node versions back until 6, Spidermonkey and JavaScriptCore. None of them do anything to the &lt;code>this&lt;/code> object of the
&lt;code>Error&lt;/code> constructor. Moreover, &lt;a href="https://262.ecma-international.org/13.0/#sec-error-constructor">the specification&lt;/a>
says that you have to be able to call the &lt;code>Error&lt;/code> constructor without &lt;code>new&lt;/code>, so it makes sense to implement it
that way. Depending on how good you know Javascript Errors, you might assume that this call might:&lt;/p>
&lt;ol>
&lt;li>Turn &lt;code>this&lt;/code> into an &lt;code>instanceof Error&lt;/code> - It does not.&lt;/li>
&lt;li>Turn &lt;code>this&lt;/code> into a &lt;a href="https://nodejs.org/dist/latest-v20.x/docs/api/util.html#utiltypesisnativeerrorvalue">native error&lt;/a> - It does not.&lt;/li>
&lt;li>Add a &lt;code>stack&lt;/code> property to &lt;code>this&lt;/code> - It does not.&lt;/li>
&lt;/ol>
&lt;p>&lt;code>Error.call(this)&lt;/code> does absolutely nothing to &lt;code>this&lt;/code>. Zero, zilch, nada. The only thing it does is &lt;strong>waste a lot of CPU time&lt;/strong>.
It creates a new &lt;code>Error&lt;/code> object and a new stack trace - a costly thing to do - and then lets the GC throw it away.&lt;/p>
&lt;p>This is a a case of &lt;strong>&lt;a href="https://en.wikipedia.org/wiki/Cargo_cult_programming">cargo cult programming&lt;/a>&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>Cargo cult programming is a style of computer programming characterized by the ritual inclusion of code or program structures that serve no real purpose.&lt;/p>
&lt;/blockquote>
&lt;p>I don&amp;rsquo;t want to hate on Axios through, a ton of popular libraries do this! I&amp;rsquo;ve &lt;code>grep&lt;/code>ed through my &lt;code>node_modules&lt;/code> folder and
found it in &lt;a href="https://github.com/ReactiveX/rxjs/blob/6e3e5e49cb735289a8e8796dc58e682468a36028/src/internal/util/createErrorClass.ts">rxjs&lt;/a>, &lt;a href="https://github.com/auth0/node-jsonwebtoken/blob/a99fd4b473e257c2f50ff69c716db1c520bf9a78/lib/JsonWebTokenError.js">jsonwebtoken&lt;/a>, &lt;a href="https://github.com/nock/nock/blob/76a8df2562536a583c60872665172cc4d965994b/lib/intercept.js#L24">nock&lt;/a> and &lt;a href="https://github.com/nodeca/js-yaml/blob/0d3ca7a27b03a6c974790a30a89e456007d62976/lib/exception.js#L27">js-yaml&lt;/a> (which comes bundled with Node.js).&lt;/p>
&lt;p>&lt;a href="https://sourcegraph.com/search?q=context:global+%28language:JavaScript+OR+language:TypeScript%29+content:%22Error.call%28this%29%22+count:1000000&amp;amp;patternType=standard&amp;amp;sm=0&amp;amp;groupBy=repo">Sourcegraph finds more than 133K results in over 10k repos&lt;/a>
for both Typescript and Javascript if you search for &lt;code>Error.call(this)&lt;/code>.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="cargo-cult-copilot">Cargo Cult Copilot&lt;/h2>
&lt;p>If Github Copilot is trained on this, will it generate code with &lt;code>Error.call(this)&lt;/code> in it? I&amp;rsquo;ve tried it by typing
&lt;code>function CachingError&lt;/code> and let it generate from there:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">CachingError&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CachingError&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">new&lt;/span> Error()).&lt;span style="color:#a6e22e">stack&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This can be done better, but no &lt;code>Error.call(this)&lt;/code>. On my second try I got the following result:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">CachingError&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Error.&lt;span style="color:#a6e22e">apply&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>, &lt;span style="color:#a6e22e">arguments&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There we are! Using &lt;code>.apply&lt;/code> instead of &lt;code>.call&lt;/code> and passing on the &lt;code>arguments&lt;/code> array would even be a good idea
if the &lt;code>Error&lt;/code> constructor would do something to it&amp;rsquo;s &lt;code>this&lt;/code>.&lt;/p>
&lt;h2 id="cargogpt4">CargoGPT4&lt;/h2>
&lt;p>What about ChatGPT? I&amp;rsquo;ve tried this prompt with GPT4:&lt;/p>
&lt;style>
.chat-inner > * {
margin-block-start: 0;
}
&lt;/style>
&lt;div style="display: flex; gap: 1rem">
&lt;div style="">Julian:&lt;/div>
&lt;div style="flex-grow: 1" class="chat-inner">Write me an Error subclass called &lt;code>CachingError&lt;/code> in Javascript using prototypal inheritance.&lt;/div>
&lt;/div>
&lt;br>&lt;/br>
&lt;style>
.chat-inner > * {
margin-block-start: 0;
}
&lt;/style>
&lt;div style="display: flex; gap: 1rem">
&lt;div style="">ChatGPT:&lt;/div>
&lt;div style="flex-grow: 1" class="chat-inner">&lt;p>Here&amp;rsquo;s an example of a CachingError subclass in JavaScript using prototypal inheritance:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Define the CachingError constructor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">CachingError&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Call the Error constructor with the given message
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Error.&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Set the error name to &amp;#39;CachingError&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CachingError&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Capture the current stack trace and store it in the error object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Error.&lt;span style="color:#a6e22e">captureStackTrace&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>, &lt;span style="color:#a6e22e">CachingError&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Set up the prototype chain between CachingError and Error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">CachingError&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Object.&lt;span style="color:#a6e22e">create&lt;/span>(Error.&lt;span style="color:#a6e22e">prototype&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">CachingError&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">constructor&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">CachingError&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Example usage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">CachingError&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;An error occurred while caching data&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">catch&lt;/span> (&lt;span style="color:#a6e22e">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>); &lt;span style="color:#75715e">// CachingError
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>); &lt;span style="color:#75715e">// An error occurred while caching data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>); &lt;span style="color:#75715e">// Stack trace
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;br>&lt;/br>
&lt;p>On the first try!&lt;/p>
&lt;h2 id="loras-to-the-rescue">LoRas to the Rescue!&lt;/h2>
&lt;p>The central problem with AI code generation is &lt;a href="https://en.wikipedia.org/wiki/Sturgeon%27s_law">Sturgeon&amp;rsquo;s law&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Sturgeon&amp;rsquo;s law (or Sturgeon&amp;rsquo;s revelation) is an adage stating &amp;ldquo;ninety percent of everything is crap&amp;rdquo;.&lt;/p>
&lt;/blockquote>
&lt;p>90% of code is crap. That means instead of having gigantic models trained on everything that people
can get their hands on, use smaller models and train with better code. In the Stable Diffusion community, people train
&lt;a href="https://arxiv.org/abs/2208.01618">textual inversions&lt;/a> with 5 images and &lt;a href="https://arxiv.org/abs/2106.09685">LoRas&lt;/a> with ~20.
There needs to be a &amp;ldquo;Javascript Error LoRa&amp;rdquo; in ChatGPT and Copilot that fixes this.&lt;/p>
&lt;h2 id="how-to-do-it-properly">How to Do It Properly&lt;/h2>
&lt;p>If you want to create a subclass of &lt;code>Error&lt;/code> use &lt;code>class&lt;/code> syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyError&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> Error {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">constructor&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>(...&lt;span style="color:#a6e22e">arguments&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;MyError&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This way, your error will be a &lt;a href="https://nodejs.org/dist/latest-v20.x/docs/api/util.html#utiltypesisnativeerrorvalue">native error&lt;/a>, &lt;code>instanceof Error&lt;/code> and have a &lt;code>.name&lt;/code> property that differentiates it from other errors.&lt;/p>
&lt;p>If you want to continue this deep dive, check out my &lt;a href="https://juliand.ax/posts/detect-js-errors/">post&lt;/a> on how to detect if an object is an error, parts of which made it into the official Node.js documentation.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I&amp;rsquo;m sure there are a lot for false positives and false negatives (&lt;code>Error.apply&lt;/code>&amp;hellip;) in this search, but you get the idea.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title>String Representations of Javascript Objects</title><link>https://juliand.ax/posts/javascript-to-string/</link><pubDate>Sat, 01 Apr 2023 00:35:30 +0200</pubDate><guid>https://juliand.ax/posts/javascript-to-string/</guid><description>toString() and Symbol.toStringTag The default Object.prototype.toString() function is defined to the specification to return [object X] even for non-objects:
Object.prototype.toString.call(undefined) // returns &amp;#34;[object Undefined]&amp;#34; Object.prototype.toString.call(true) // returns &amp;#34;[object Boolean]&amp;#34; {}.toString() // returns &amp;#34;[object Object]&amp;#34; X is a so-called &amp;lsquo;string tag&amp;rsquo; and in newer versions of Javascipt, you can set it yourself:
{[Symbol.toStringTag]:&amp;#34;MyObject&amp;#34;}.toString() // returns &amp;#34;[object MyObject]&amp;#34; But for objects, you can also just implement the complete toString function:
{toString: ()=&amp;gt; &amp;#34;My Cool Object!</description><content>&lt;h2 id="tostring-and-symboltostringtag">&lt;code>toString()&lt;/code> and &lt;code>Symbol.toStringTag&lt;/code>&lt;/h2>
&lt;p>The default &lt;code>Object.prototype.toString()&lt;/code> function is
&lt;a href="https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.prototype.tostring">defined to the specification&lt;/a>
to return &lt;code>[object X]&lt;/code> even for non-objects:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span>Object.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">toString&lt;/span>.&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#66d9ef">undefined&lt;/span>) &lt;span style="color:#75715e">// returns &amp;#34;[object Undefined]&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>Object.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">toString&lt;/span>.&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#66d9ef">true&lt;/span>) &lt;span style="color:#75715e">// returns &amp;#34;[object Boolean]&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>{}.&lt;span style="color:#a6e22e">toString&lt;/span>() &lt;span style="color:#75715e">// returns &amp;#34;[object Object]&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>X&lt;/code> is a so-called &amp;lsquo;string tag&amp;rsquo; and in newer versions of Javascipt, you can set it yourself:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span>{[&lt;span style="color:#a6e22e">Symbol&lt;/span>.&lt;span style="color:#a6e22e">toStringTag&lt;/span>]&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MyObject&amp;#34;&lt;/span>}.&lt;span style="color:#a6e22e">toString&lt;/span>() &lt;span style="color:#75715e">// returns &amp;#34;[object MyObject]&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But for objects, you can also just implement the complete &lt;code>toString&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#a6e22e">toString&lt;/span>&lt;span style="color:#f92672">:&lt;/span> ()=&amp;gt; &lt;span style="color:#e6db74">&amp;#34;My Cool Object!&amp;#34;&lt;/span>}.&lt;span style="color:#a6e22e">toString&lt;/span>() &lt;span style="color:#75715e">// returns &amp;#34;My Cool Object!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>However, the &lt;code>toString()&lt;/code> function is not used by &lt;code>console.log()&lt;/code> or in the Node.js or Deno REPLs.&lt;/strong>&lt;/p>
&lt;h2 id="inspect-is-the-real-tostring">&lt;code>inspect()&lt;/code> is the real &lt;code>toString()&lt;/code>&lt;/h2>
&lt;p>In Node.js, objects are converted to strings using the &lt;a href="https://nodejs.org/dist/latest-v19.x/docs/api/util.html#utilinspectobject-options">&lt;code>util.inspect()&lt;/code>&lt;/a> function.
In Deno, there is the equivalent &lt;a href="https://deno.land/api@v1.32.1?s=Deno.inspect">&lt;code>Deno.inspect()&lt;/code>&lt;/a>. These methods are used
both in the REPLs and when using &lt;code>console.log()&lt;/code>.
You can influence what these do by implementing a function with the symbol &lt;code>nodejs.util.inspect.custom&lt;/code> and
&lt;code>Deno.customInspect&lt;/code> respectively. If you implement both, pretty printing works in both.
Check out this example for a binary tree:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Tree&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">constructor&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#a6e22e">left&lt;/span>, &lt;span style="color:#a6e22e">right&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">left&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">left&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">right&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">right&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">Symbol&lt;/span>.&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Deno.customInspect&amp;#34;&lt;/span>)]() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">toString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">Symbol&lt;/span>.&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;nodejs.util.inspect.custom&amp;#34;&lt;/span>)](){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">toString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">toString&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">printNode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">node&lt;/span>, &lt;span style="color:#a6e22e">prefix&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">isLeft&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">prefix&lt;/span>&lt;span style="color:#e6db74">}${&lt;/span>&lt;span style="color:#a6e22e">isLeft&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#39;├──&amp;#39;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;└──&amp;#39;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">\n`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">newPrefix&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">prefix&lt;/span>&lt;span style="color:#e6db74">}${&lt;/span>&lt;span style="color:#a6e22e">isLeft&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#39;│ &amp;#39;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">printNode&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">left&lt;/span>, &lt;span style="color:#a6e22e">newPrefix&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">printNode&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">right&lt;/span>, &lt;span style="color:#a6e22e">newPrefix&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">str&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">printNode&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>).&lt;span style="color:#a6e22e">trim&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And here is a Deno session that uses it:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt; tree
└── 52
├── 41
│ ├── 51
│ └── 44
└── 94
├── 54
└── 36
&amp;gt; console.log(tree);
└── 52
├── 41
│ ├── 51
│ └── 44
└── 94
├── 54
└── 36
&lt;/code>&lt;/pre>&lt;p>Isn’t that beautiful? Sadly there is no way to accomplish this in browsers.&lt;/p></content></item><item><title>How to detect Errors in JavaScript</title><link>https://juliand.ax/posts/detect-js-errors/</link><pubDate>Fri, 31 Mar 2023 19:16:51 +0200</pubDate><guid>https://juliand.ax/posts/detect-js-errors/</guid><description>TL/DR Finding out if an object is an error is unreliable and full of edge-cases. A modern, isomorphic but still not perfect way to do it is the following1:
function isError (object) { return object instanceof Error || ( object?.constructor?.name === &amp;#39;Error&amp;#39; || object?.constructor?.name === &amp;#39;DOMException&amp;#39; ) } Many custom error classes in the JavaScript ecosystem are hard to detect because creating custom error classes used to be hard before the introduction of the class syntax.</description><content>&lt;h2 id="tldr">TL/DR&lt;/h2>
&lt;p>Finding out if an object is an error is unreliable and full of edge-cases. A modern,
&lt;a href="https://en.wikipedia.org/wiki/Isomorphic_JavaScript">isomorphic&lt;/a> but still not perfect way to
do it is the following&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">isError&lt;/span> (&lt;span style="color:#a6e22e">object&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">object&lt;/span> &lt;span style="color:#66d9ef">instanceof&lt;/span> Error &lt;span style="color:#f92672">||&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">object&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">constructor&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Error&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">object&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">constructor&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;DOMException&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Many custom error classes in the JavaScript ecosystem are hard to detect
because creating custom error classes used to be hard before the introduction
of the &lt;code>class&lt;/code> syntax.&lt;/p>
&lt;h2 id="part-one-wtf-is-an-error-anyway">Part One: WTF is an error anyway?&lt;/h2>
&lt;p>In JavaScript different things can be meant by &amp;ldquo;error&amp;rdquo;. This part
discusses the different kinds of errors.&lt;/p>
&lt;h3 id="native-errors">Native Errors&lt;/h3>
&lt;p>The &lt;a href="https://tc39.es/ecma262/#sec-error-objects">JavaScript
specification&lt;/a> defines a
number of &amp;ldquo;Native Errors&amp;rdquo; which are all &lt;code>instanceof Error&lt;/code>. According to
the specification, these errors are marked in a way that is not
accessible from JavaScript itself&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. However, in practice they can be
&lt;a href="#is-native-error">detected reliably&lt;/a> in Node.js and &lt;a href="#to-string">unreliably in the
browser&lt;/a>.&lt;/p>
&lt;h3 id="domexceptions">DOMExceptions&lt;/h3>
&lt;p>&lt;code>DOMException&lt;/code>s&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> are errors that are thrown when an error
happens in one of the web APIs. It is defined in the &lt;a href="https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-17189187">DOM
specification&lt;/a>.
DOMExceptions are no native errors and are not &lt;code>instanceof Error&lt;/code>.
The &lt;code>DOMException&lt;/code> class does exist both in the browser and in Node.js.&lt;/p>
&lt;h3 id="instances-of-error">Instances of &lt;code>Error&lt;/code>&lt;/h3>
&lt;p>There are a lot of custom errors defined in popular libraries that are
not native but still instances of &lt;code>Error&lt;/code>. This happenes if the
prototype of the error object is manually set to &lt;code>Error.prototype&lt;/code>.&lt;/p>
&lt;h3 id="objects-with-a-constructor-named-error">Objects with a constructor named &amp;ldquo;Error&amp;rdquo;&lt;/h3>
&lt;p>If an object crosses a &lt;a href="https://tc39.es/ecma262/#realm">realm boundary&lt;/a>
&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>, it is not instance
of anything in the current realm. However, the name of the constructor
is still &lt;code>&amp;quot;Error&amp;quot;&lt;/code>.&lt;/p>
&lt;h3 id="objects-with-the-string-properties-name-and-message">Objects with the &lt;code>string&lt;/code> properties &lt;code>name&lt;/code> and &lt;code>message&lt;/code>&lt;/h3>
&lt;p>For TypeScript, an &lt;code>Error&lt;/code> is any object that conforms to &lt;a href="https://github.com/microsoft/TypeScript/blob/4b6fb95f040c5c81743e19a56df8fa99bf3d139f/lib/lib.es5.d.ts#L1052">this
interface&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-TypeScript" data-lang="TypeScript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> Error {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">message&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stack?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The optional &lt;code>stack&lt;/code> property is not defined in the standard but present
in every modern JavaScript engine.&lt;/p>
&lt;h2 id="part-two-how-to-check-for-errors">Part Two: How to Check for Errors&lt;/h2>
&lt;h3 id="detecting-native-errors">Detecting Native Errors&lt;/h3>
&lt;p>Clever people came up with a way to check for native errors by using the
&lt;code>Object.prototype.toString()&lt;/code> method:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>Object.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">toString&lt;/span>.&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> Error()) &lt;span style="color:#75715e">// returns &amp;#39;[object Error]&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>Object.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">toString&lt;/span>.&lt;span style="color:#a6e22e">call&lt;/span>({}) &lt;span style="color:#75715e">// returns &amp;#39;[object Object]&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Objects marked as errors are &lt;em>used to be&lt;/em> the only ones for which
&lt;code>Object.prototype.toString.call()&lt;/code> would return &lt;code>[object Error]&lt;/code> instead
of &lt;code>[object Object]&lt;/code>. However, this is no longer the case since the
introduction of
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag">&lt;code>Symbol.toStringTag&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">fakeError&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {[&lt;span style="color:#a6e22e">Symbol&lt;/span>.&lt;span style="color:#a6e22e">toStringTag&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Error&amp;#39;&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Object.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">toString&lt;/span>.&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#a6e22e">fakeError&lt;/span>) &lt;span style="color:#75715e">// returns &amp;#39;[object Error]&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Therefore, there can be &lt;em>false positives&lt;/em> when checking with
&lt;code>Object.prototype.toString.call()&lt;/code>.&lt;/p>
&lt;p>There are two other reasons for not using this method: firstly, using
&lt;code>Object.prototype.toString.call()&lt;/code> for type testing is discouraged &lt;a href="https://tc39.es/ecma262/#sec-object.prototype.tostring">in
the
specification&lt;/a>.
And secondly, many custom errors and &lt;code>DOMException&lt;/code> will not return
&lt;code>[object Error]&lt;/code> when checked like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// I&amp;#39;m using AxiosError as an example for an error that is not a native error.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// I don&amp;#39;t want to pick on Axios; this is very common.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> {&lt;span style="color:#a6e22e">AxiosError&lt;/span>} &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;axios&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Object.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">toString&lt;/span>.&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">AxiosError&lt;/span>()); &lt;span style="color:#75715e">// returns &amp;#39;[object Object]&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>Object.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">toString&lt;/span>.&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DOMException&lt;/span>()); &lt;span style="color:#75715e">// returns &amp;#39;[object DOMException]&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thus, &lt;em>False negatives&lt;/em> will also happen quite regularly when using this
method.&lt;/p>
&lt;p>Because of all these problems, the Node.js developers decided to expose
the V8-internal &lt;code>IsNativeError()&lt;/code> function as
&lt;a href="https://nodejs.org/api/util.html#utiltypesisnativeerrorvalue">&lt;code>util.types.isNativeError()&lt;/code>&lt;/a>.
This gives you a reliable way to check if a value is marked as an error.
However, since many custom error values are not marked, this way of
checking will still produce many false negatives.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">util&lt;/span>.&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">isNativeError&lt;/span>({[&lt;span style="color:#a6e22e">Symbol&lt;/span>.&lt;span style="color:#a6e22e">toStringTag&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Error&amp;#39;&lt;/span>}) &lt;span style="color:#75715e">// returns false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">util&lt;/span>.&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">isNativeError&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> Error()) &lt;span style="color:#75715e">// returns true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>I recommend not checking if an error is native. There are too many
false negatives and cross-realm checking can be done using constructor
names.&lt;/strong>&lt;/p>
&lt;h3 id="detecting-error-instances">Detecting &lt;code>Error&lt;/code> instances&lt;/h3>
&lt;p>Another way of checking if something is an error is using the
&lt;code>instanceof&lt;/code> operator. It is quite common for errors to be
&lt;code>instanceof Error&lt;/code> but not native, so this will catch more errors than
the methods described above. It also finds &lt;code>DOMException&lt;/code>s as they are also
&lt;code>instanceof Error&lt;/code>. It is also faster than most other methods as &lt;code>instanceof&lt;/code>
is quicker than property access. However, as already mentioned, this does
not work across realms:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#66d9ef">new&lt;/span> Error()) &lt;span style="color:#66d9ef">instanceof&lt;/span> Error; &lt;span style="color:#75715e">// returns true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">DOMException&lt;/span>()) &lt;span style="color:#66d9ef">instanceof&lt;/span> Error; &lt;span style="color:#75715e">// returns true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vm&lt;/span>.&lt;span style="color:#a6e22e">createContext&lt;/span>({});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">myError&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vm&lt;/span>.&lt;span style="color:#a6e22e">runInContext&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;new Error()&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">context&lt;/span>); &lt;span style="color:#75715e">// creates an error in a different realm
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">myError&lt;/span> &lt;span style="color:#66d9ef">instanceof&lt;/span> Error; &lt;span style="color:#75715e">// returns false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">util&lt;/span>.&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">isNativeError&lt;/span>(&lt;span style="color:#a6e22e">myError&lt;/span>); &lt;span style="color:#75715e">// returns true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To detect errors from other realms we can check the constructor name.
This may lead to false positives though:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#66d9ef">new&lt;/span> Error()) &lt;span style="color:#66d9ef">instanceof&lt;/span> Error; &lt;span style="color:#75715e">// returns true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vm&lt;/span>.&lt;span style="color:#a6e22e">createContext&lt;/span>({});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">myError&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vm&lt;/span>.&lt;span style="color:#a6e22e">runInContext&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;new Error()&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">context&lt;/span>); &lt;span style="color:#75715e">// creates an error in a different realm
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">myError&lt;/span>.&lt;span style="color:#a6e22e">constructor&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Error&amp;#34;&lt;/span>; &lt;span style="color:#75715e">// returns true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>{&lt;span style="color:#a6e22e">constructor&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Error&amp;#34;&lt;/span>}}.&lt;span style="color:#a6e22e">constructor&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Error&amp;#34;&lt;/span>; &lt;span style="color:#75715e">// returns true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, the example for the false positive is contrived and if people
really want to fake an error, they probably have reasons for it.&lt;/p>
&lt;h3 id="checking-for-message-and-name">Checking for &lt;code>message&lt;/code> and &lt;code>name&lt;/code>&lt;/h3>
&lt;p>If TypeScript&amp;rsquo;s error definition is good enough for you, this type guard
will do the job:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-TypeScript" data-lang="TypeScript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">isError&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>: &lt;span style="color:#66d9ef">unknown&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> Error {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#34;object&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>] &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#34;string&amp;#34;&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>] &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#34;string&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a pretty loose definition however, and one can easily imagine
real-world examples for objects with these properties that are not
errors. So why not also check for &lt;code>stack&lt;/code>? The problem with that is that the string representation of that stack
trace is created lazily when it is accessed. So checking for the &lt;code>stack&lt;/code> attribute to find out if
something is an &lt;code>Error&lt;/code> is about 8.5 times slower&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> than just checking &lt;code>name&lt;/code> and &lt;code>message&lt;/code>.&lt;/p>
&lt;h3 id="summary-table">Summary Table&lt;/h3>
&lt;p>In the following table, more ✓s are always better:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Method&lt;/th>
&lt;th>No False Positives&lt;/th>
&lt;th>No False Negatives&lt;/th>
&lt;th>Is Isomorphic&lt;/th>
&lt;th>Not Deprecated&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Object.prototype.toString.call()&lt;/td>
&lt;td>⤬&lt;/td>
&lt;td>⤬&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>⤬&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>util.types.isNativeError()&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>⤬&lt;/td>
&lt;td>⤬&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>instanceof Error&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>⤬&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X.constructor.name === &amp;ldquo;Error&amp;rdquo;&lt;/td>
&lt;td>⤬&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>checking for message and name&lt;/td>
&lt;td>⤬&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="using-combinations-of-several-checks">Using Combinations of several checks&lt;/h2>
&lt;p>&lt;em>Using combinations of the methods described above is generally the way
to go.&lt;/em> Node.js itself uses &lt;a href="https://github.com/nodejs/node/blob/3c0131a4190a88211780dcc07dbaf84c8de97f34/lib/internal/util.js#L95">this
function&lt;/a>
for checking if something is an &lt;code>Error&lt;/code> internally:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">isError&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// An error could be an instance of Error while not being a native error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// or could be from a different realm and not be instance of Error but still
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// be a native error.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">isNativeError&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>) &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#66d9ef">instanceof&lt;/span> Error;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>While this is better than using only one of the methods, it still can
produce false negatives, if the error was created in another realm and
is not a native error:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vm&lt;/span>.&lt;span style="color:#a6e22e">createContext&lt;/span>({});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">myError&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vm&lt;/span>.&lt;span style="color:#a6e22e">runInContext&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;new AxiosError()&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">context&lt;/span>); &lt;span style="color:#75715e">// creates an error in a different realm
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">isError&lt;/span>(&lt;span style="color:#a6e22e">myError&lt;/span>); &lt;span style="color:#75715e">// returns false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Node.js&amp;rsquo;s deprecated
&lt;a href="https://nodejs.org/api/util.html#utiliserrorobject">&lt;code>util.isError()&lt;/code>&lt;/a>
function uses a combination of &lt;code>instanceof&lt;/code> and
&lt;code>Object.prototype.toString.call()&lt;/code>. This makes it deprecated but
isomorphic.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">isError&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Object.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">toString&lt;/span>.&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>) &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[object Error]&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#66d9ef">instanceof&lt;/span> Error;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And finally, as already mentioned above, undici uses &lt;code>instanceof&lt;/code> and
constructor names. This makes it work across realms and does not use
Node.js-only functions. It will also produce less false positives than
just checking for the &lt;code>name&lt;/code> and &lt;code>message&lt;/code> properties. It is also fast
because the &lt;code>||&lt;/code> short-circuits it to an &lt;code>instanceof&lt;/code> test in many cases:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">isError&lt;/span> (&lt;span style="color:#a6e22e">object&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">object&lt;/span> &lt;span style="color:#66d9ef">instanceof&lt;/span> Error &lt;span style="color:#f92672">||&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">object&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">constructor&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Error&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">object&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">constructor&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;DOMException&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>This code is taken from
&lt;a href="https://github.com/nodejs/undici/blob/4885b11dd60b4d1a785c4e5a519ad87920549d1c/lib/fetch/util.js#L75">undici&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>An &lt;code>[[ErrorData]]&lt;/code> &lt;a href="https://tc39.es/ecma262/#sec-object-internal-methods-and-internal-slots">internal
slot&lt;/a>
is used for this.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;code>DOMException&lt;/code>s don&amp;rsquo;t fit into the JavaScript naming scheme for errors. In JavaScript an exception is what happens if an
error is thrown.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>A realm is a JavaScript execution context which has its own global environment. If an error comes from another realm, its prototype points
to the &lt;code>Error&lt;/code> prototype of the realm it was created in. Thus,&lt;code>instanceof Error&lt;/code> will return &lt;code>false&lt;/code>.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>I did some micro benchmarking to find this out. The exact number may depend on the use-case but it is &lt;strong>a lot&lt;/strong> slower in any case.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title>Profile</title><link>https://juliand.ax/profile/</link><pubDate>Fri, 31 Mar 2023 19:01:34 +0200</pubDate><guid>https://juliand.ax/profile/</guid><description>I am a software engineer working for ifm as a Node.js backend developer. My primary interest are programming languages, functional programming and software engineering.</description><content>&lt;p>I am a software engineer working for &lt;a href="https://ifm.com">ifm&lt;/a> as a &lt;a href="https://nodejs.org">Node.js&lt;/a> backend developer.
My primary interest are programming languages, functional programming and software engineering.&lt;/p></content></item><item><title>Showcase</title><link>https://juliand.ax/showcase/</link><pubDate>Fri, 31 Mar 2023 19:01:34 +0200</pubDate><guid>https://juliand.ax/showcase/</guid><description>json_env json_env is dotenv, but with JSON. It loads environment variables from JSON files (.env.json per default) and starts a subprocess with them. Storing configuration in the environment separate from code is based on The Twelve-Factor App methodology. It is also my first Rust project.</description><content>&lt;h2 id="json_env">json_env&lt;/h2>
&lt;p>&lt;a href="https://github.com/brodo/json_env">json_env&lt;/a> is &lt;a href="https://github.com/motdotla/dotenv">dotenv&lt;/a>, but with JSON.
It loads environment variables from JSON files (&lt;code>.env.json&lt;/code> per default) and starts a subprocess with them.
Storing configuration in the environment separate from code is based on &lt;a href="http://12factor.net/config">The Twelve-Factor&lt;/a> App methodology.
It is also my first Rust project.&lt;/p></content></item></channel></rss>